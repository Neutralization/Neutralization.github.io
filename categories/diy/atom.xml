<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DIY on H⁺ + OH⁻ → H₂O</title><link>https://naizi.ch/categories/diy/</link><description>Recent content in DIY on H⁺ + OH⁻ → H₂O</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 05 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://naizi.ch/categories/diy/atom.xml" rel="self" type="application/rss+xml"/><item><title>OpenWrt 折腾笔记</title><link>https://naizi.ch/2021/10/05/openwrt-%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://naizi.ch/2021/10/05/openwrt-%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装 WSL，不再赘述。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://openwrt.org/docs/guide-developer/build-system/wsl#setting_up_path" target="_blank" rel="noopener"
>移除 WSL 环境变量中包含的 Windows 路径&lt;/a>，为编译做准备。&lt;/p>
&lt;p>打开 WSL 终端，新建&lt;code>/etc/wsl.conf&lt;/code>文件，输入如下内容并保存。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">[interop]
appendWindowsPath = false
&lt;/code>&lt;/pre>&lt;p>然后执行&lt;code>wsl --shutdown&lt;/code>，再重新启动 wsl，执行&lt;code>echo ${PATH}&lt;/code>检查是否含有 Windows 路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新系统&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>sudo&lt;/strong> apt update&lt;br>
&lt;strong>sudo&lt;/strong> apt full-upgrade -y&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://openwrt.org/docs/guide-developer/build-system/install-buildsystem#debianubuntu" target="_blank" rel="noopener"
>准备编译工具&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>sudo&lt;/strong> apt install -y ack antlr3 asciidoc autoconf automake \&lt;br>
autopoint binutils bison build-essential bzip2 ccache cmake cpio \&lt;br>
curl device-tree-compiler fastjar flex gawk gettext gcc-multilib \&lt;br>
g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \&lt;br>
libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \&lt;br>
libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool \&lt;br>
lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf \&lt;br>
python2.7 python3 python3-pip qemu-utils rsync scons squashfs-tools \&lt;br>
subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;h2 id="克隆仓库">克隆仓库&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>下载 OpenWrt 源码（更改为&lt;a class="link" href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener"
>LEDE&lt;/a>）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd ~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/coolsnowwolf/lede openwrt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd openwrt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>下载 &lt;a class="link" href="https://github.com/vernesong/OpenClash" target="_blank" rel="noopener"
>OpenClash&lt;/a> 源码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd ~/openwrt/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir package/luci-app-openclash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd package/luci-app-openclash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin https://github.com/vernesong/OpenClash.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config core.sparsecheckout true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;luci-app-openclash&amp;#34;&lt;/span> &amp;gt;&amp;gt; .git/info/sparse-checkout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull --depth &lt;span style="color:#ae81ff">1&lt;/span> origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch --set-upstream-to&lt;span style="color:#f92672">=&lt;/span>origin/master master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改路由 IP 地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; sed -i &lt;span style="color:#e6db74">&amp;#39;s/192.168.1.1/192.168.2.1/g&amp;#39;&lt;/span> package/base-files/files/bin/config_generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="开始编译">开始编译&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>更新 feeds&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>cd&lt;/strong> ~/openwrt/&lt;br>
./scripts/feeds update -a&lt;br>
./scripts/feeds install -a&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>选择编译内容&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>cd&lt;/strong> ~/openwrt/&lt;br>
&lt;strong>make defconfig&lt;/strong>&lt;br>
&lt;strong>make menuconfig&lt;/strong>&lt;br>
./scripts/diffconfig.sh &amp;gt; diffconfig&lt;/p>
&lt;/blockquote>
&lt;p>diffconfig 后期可用于更新镜像时导入&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>cp&lt;/strong> diffconfig ~/openwrt/.config&lt;br>
&lt;strong>make defconfig&lt;/strong>&lt;br>
&lt;strong>make menuconfig&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-menuconfig" data-lang="menuconfig">Target System ---&amp;gt;
(X) Rockchip
Subtarget ---&amp;gt;
(X) RK33xx boards (64 bit)
Target Profile ---&amp;gt;
(X) FriendlyARM NanoPi R2S
Target Images ---&amp;gt;
[*] ext4
[*] squashfs
[*] GZip images
(128) Kernel partition size (in MB)
(2048) Root filesystem partition size (in MB)
Kernel modules ---&amp;gt;
Cryptographic API modules ---&amp;gt;
ALL
LuCI ---&amp;gt;
2. Modules ---&amp;gt;
Translations ---&amp;gt;
&amp;lt;*&amp;gt; Simplified Chinese (zh-cn)
&amp;lt;*&amp;gt; luci-compat
3. Applications ---&amp;gt;
&amp;lt;*&amp;gt; luci-app-openclash
&amp;lt;*&amp;gt; luci-app-turboacc
&amp;lt;*&amp;gt; luci-app-unblockmusic
[*] UnblockNeteaseMusic NodeJS Version
&amp;lt;*&amp;gt; luci-app-wireguard
&amp;lt;*&amp;gt; luci-app-zerotier
4. Themes ---&amp;gt;
&amp;lt;*&amp;gt; luci-theme-argon
Utilities ---&amp;gt;
Editors ---&amp;gt;
&amp;lt;*&amp;gt; nano-full
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>执行编译&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>cd&lt;/strong> ~/openwrt/&lt;br>
&lt;strong>make&lt;/strong> -j8 download&lt;br>
&lt;strong>make&lt;/strong> -j8&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>编译生成的镜像文件在 &lt;code>~/openwrt/bin/targets/rockchip/armv8/&lt;/code> 路径下&lt;/p>
&lt;h2 id="收尾工作">收尾工作&lt;/h2>
&lt;p>opkg 安装部分官方包的时候会提示 Kernel 版本不对&lt;code>kernel is not compatible&lt;/code>，这是因为自己编译的 kernel 指纹和官方不一致造成的，&lt;a class="link" href="https://github.com/iyuangang/openwrt/issues/8#issuecomment-605431578" target="_blank" rel="noopener"
>替换成官方指纹即可&lt;/a>。&lt;/p>
&lt;p>比如目前 kernel 版本是&lt;code>5.4.143-1-fb881fbbae69f30da18e7c6eb01310c1&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>sed&lt;/strong> -i s/&lt;code>编译的kernel hash&lt;/code>/fb881fbbae69f30da18e7c6eb01310c1/g /usr/lib/opkg/status&lt;/p>
&lt;/blockquote>
&lt;h2 id="eof">EOF&lt;/h2>
&lt;p>编译 run 了一万年，再不写点什么记下来，下次编译根本记不住了.jpg&lt;/p>
&lt;p>后来参考学习了 P3TERX 的 &lt;a class="link" href="https://p3terx.com/archives/build-openwrt-with-github-actions.html" target="_blank" rel="noopener"
>这篇文章&lt;/a> 利用 Github Action 进行编译，并且按照 &lt;a class="link" href="https://github.com/coolsnowwolf/lede/pull/7796" target="_blank" rel="noopener"
>LEDE 的这个 PR&lt;/a> 打开了缓存工具链，再也不用面对奇怪的环境问题和该参数重编又是四、五个小时的窘境了。&lt;/p></description></item><item><title>升级 3D 打印机固件及远程打印方案</title><link>https://naizi.ch/2021/08/28/%E5%8D%87%E7%BA%A7-3d-%E6%89%93%E5%8D%B0%E6%9C%BA%E5%9B%BA%E4%BB%B6%E5%8F%8A%E8%BF%9C%E7%A8%8B%E6%89%93%E5%8D%B0%E6%96%B9%E6%A1%88/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://naizi.ch/2021/08/28/%E5%8D%87%E7%BA%A7-3d-%E6%89%93%E5%8D%B0%E6%9C%BA%E5%9B%BA%E4%BB%B6%E5%8F%8A%E8%BF%9C%E7%A8%8B%E6%89%93%E5%8D%B0%E6%96%B9%E6%A1%88/</guid><description>&lt;p>Ender 3 不愧是创想三维家的经典款 3D 打印机，一直没关注产品消息，不知道什么时候已经出了 V2 款了。&lt;/p>
&lt;p>买当然是不会买的，原来的版本还是挺好用，购买的时候正好京东打折，当时 1k 出头的价格还是很香的。&lt;/p>
&lt;p>买来时间也有点久了，考虑升级一下固件，但是官方并没有提供这一款的后续固件升级，也没有相关教程。搜索了一下发现还需要自行刷入 bootloader 后才能刷写固件，看来是当时就没有考虑用户侧的后续升级。&lt;/p>
&lt;p>升级固件的想法主要是因为看到了 OctoPrint，一个利用树莓派控制和实时监控 3D 打印机的项目。&lt;/p>
&lt;h2 id="刷写-bootloader">刷写 bootloader&lt;/h2>
&lt;p>主要是跟着&lt;a class="link" href="https://www.th3dstudio.com/hc/guides/bootloader/bootloader-flashing-guide-cr-10-ender-2-3-5-wanhao-i3-anet-1284p-boards/" target="_blank" rel="noopener"
>Bootloader Flashing Guide&lt;/a>这篇文章中的指导。因为主板芯片是 1284P，和其他打印机的刷写存在区别，建议直接下载链接中的刷写包来操作。&lt;/p>
&lt;p>概括的来讲，需要 Arduino 开发板作为中介，与打印机主板的刷写接口连接，再通过 Arduino IDE 将 bootloader 引导程序由 Arduino 刷写到打印机主板芯片上。&lt;/p>
&lt;p>找同事借了一块 Arduino MEGA 2560 和几根杜邦线，因为 Arduino 的不同版本引脚定义几乎没有区别，也不是一定要用 Arduino Uno。&lt;/p>
&lt;p>完成这一步后，打印机有了 bootloader，就可以方便的进行固件升级操作了。&lt;/p>
&lt;h2 id="编译固件并上传至打印机">编译固件并上传至打印机&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.th3dstudio.com/hc/downloads/unified-2-firmware/creality/creality-ender-3-firmware-melzi-board/" target="_blank" rel="noopener"
>TH3D&lt;/a> 给出了 Ender 3 的完整固件升级流程。&lt;/p>
&lt;p>真的是个不错的网站，除了 Creality 还有其他很多常见 3D 打印机厂家不同型号的操作教程。根据教程描述，安装 VSCode，编译固件上传即可，实际操作中我也完全没有遇到阻碍，非常顺利的编译上传完成了，见到了启动画面的 TH3D 标志 logo。除了界面是全英文，但这也并不影响机上操作。&lt;/p>
&lt;h2 id="octoprint-远程打印">OctoPrint 远程打印&lt;/h2>
&lt;p>又是一个利用树莓派的项目，于是我的树莓派又经历了一次 SD 卡格式化重写映像。&lt;/p>
&lt;p>同样也是完全跟随&lt;a class="link" href="https://howchoo.com/g/y2rhnzm3odz/control-your-3d-printer-with-octoprint-and-raspberry-pi" target="_blank" rel="noopener"
>教程&lt;/a>操作，在树莓派上使用 OctoPrint 映像，连接 WiFi，USB 连接打印机。&lt;/p>
&lt;p>教程中还提供了一套用于固定树莓派摄像机的 3D 打印文件，可以固定在打印机 X 轴上用来监测打印状态。也可以选择使用普通的 USB 摄像头，但是架设摄像头的方式就要靠自己另外实现了。&lt;/p>
&lt;p>正好很早以前买过一个树莓派专用摄像头，这就给它用上了。&lt;/p>
&lt;h2 id="finish">Finish&lt;/h2>
&lt;p>一切设置好，https 访问树莓派 IP 或者 &lt;a class="link" href="https://octopi.local/" target="_blank" rel="noopener"
>https://octopi.local/&lt;/a> ，如果摄像头正常的话，就能看到打印状态了。&lt;/p>
&lt;p>界面里可以一览无余的看到打印机当前的喷嘴和热床温度，打印状态，Gcode 图示等等。也可以直接通过网页上传 Gcode 文件直接打印，由于是通过 USB 连接到打印机，免去了反复插拔 SD 卡传输文件的步骤，真的是方便了很多。&lt;/p>
&lt;p>OctoPrint 还提供视频录制，开启后可以录制打印过程中的摄像头画面，生成延时视频。&lt;/p>
&lt;p>&lt;img src="https://naizi.ch/pic/2021-08-28-upgrade-3d-printer/Snipaste_2021-08-28_14-55-44.png"
loading="lazy"
alt="Timelapse"
>&lt;/p></description></item><item><title>圆周率里的麻将</title><link>https://naizi.ch/2021/03/17/%E5%9C%86%E5%91%A8%E7%8E%87%E9%87%8C%E7%9A%84%E9%BA%BB%E5%B0%86/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://naizi.ch/2021/03/17/%E5%9C%86%E5%91%A8%E7%8E%87%E9%87%8C%E7%9A%84%E9%BA%BB%E5%B0%86/</guid><description>&lt;p>2 月的时候，群友看 VTB 直播雀魂，发现主播为了防止互动的时候窥屏看到手牌，PS 了一张看起来像手牌的图来挡住真实的手牌。&lt;/p>
&lt;p>群友受此启发，纷纷讨论自己也要这么玩，PS 各种役种的牌扮老虎，比如大家都喜欢的国士无双：&lt;/p>
&lt;p>&lt;img src="https://naizi.ch/pic/2021-03-17-mahjong-in-pai/19m19p19s1234567z_1p.png"
loading="lazy"
alt="国士无双"
>&lt;/p>
&lt;p>大家云集响应，因为之前正好写过&lt;a class="link" href="https://github.com/Neutralization/majsoul-generator" target="_blank" rel="noopener"
>生成器&lt;/a>，趁此机会我就说群友要啥我就帮群友 PS，都可以做。后来群友觉得正经的役没意思，想搞点不一样的，说要搞个圆周率。这就有意思了。话题很自然的转到了那能不能胡牌的问题上，因为只有数字，先默认牌型是清一色，一试，发现小数点后最开始的 14 位数字就真的能凑成一副胡牌：&lt;/p>
&lt;blockquote>
&lt;p>3.&lt;code>14159265358979&lt;/code> -&amp;gt; 234 678 555 999 11&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;p>我立刻兴致来了，马上就想看看位数再往后，还能有哪里能凑成胡牌，这就开始写脚本。&lt;/p>
&lt;p>圆周率位数的迭代之前写飞花令的时候用过，Ctrl+V 过来，然后是判断是否和牌的算法。简单来说按照一般和牌的标准型&lt;code>n*AAA+m*ABC+DD=14&lt;/code>，通过先取雀头&lt;code>DD&lt;/code>，然后交换先取刻子&lt;code>AAA&lt;/code>后顺子&lt;code>ABC&lt;/code>或者先顺子后刻子的逻辑迭代完整副手牌，看残张是否为零就能确认这副手牌是否和牌。&lt;/p>
&lt;p>写完代码，测试了几次，又另外加入了七对子牌型的判断，然后以一万位为目标执行了一遍。不出意料还真的有很多位置的数列能够凑成和牌。感觉这还是值得&lt;a class="link" href="https://www.bilibili.com/video/BV1pU4y1a7W8" target="_blank" rel="noopener"
>做个视频&lt;/a>记录一下。&lt;/p>
&lt;p>视频里只迭代了小数点后一万位的数字。在测试脚本的时候，其实试验过迭代到二十万位，已经相当耗时了，不过也因此遇到了一些比较值得一说的牌型：&lt;/p>
&lt;p>比如遇到的第一个&lt;code>平和&lt;/code>是在第 209 位小数，数列是&lt;code>7 5 6 6 5 9 3 3 4 4 6 1 2 8&lt;/code>，牌型是&lt;code>66 123 345 456 789&lt;/code>，还是一个&lt;code>一气贯通&lt;/code>&lt;/p>
&lt;p>&lt;code>断幺九&lt;/code>在第 222 位小数，数列是&lt;code>8 4 7 5 6 4 8 2 3 3 7 8 6 7&lt;/code>，牌型是&lt;code>66 777 888 234 345&lt;/code>&lt;/p>
&lt;p>&lt;code>四暗刻&lt;/code>在第 5391 位小数，数列是&lt;code>8 8 2 8 1 6 1 3 3 2 3 1 6 6&lt;/code>，牌型是&lt;code>22 111 333 666 888&lt;/code>&lt;/p>
&lt;p>&lt;code>二杯口&lt;/code>在第 15912 位小数，数列是&lt;code>8 5 7 4 5 6 9 8 1 4 7 1 9 6&lt;/code>，牌型是&lt;code>11 456 456 789 789&lt;/code>，这也是第一个七对子牌型（但规则只计算二杯口），下一个七对子牌型在 16834 位，但同样也是二杯口，再下一个则是 21513 的一色双龙会，国标役种。真正的七对子要到 35441 位才能遇到，&lt;code>6 4 6 4 5 5 1 2 7 8 1 2 7 8&lt;/code>，牌型&lt;code>11 22 44 55 66 77 88&lt;/code>&lt;/p>
&lt;p>&lt;code>一色双龙会&lt;/code>在第 21513 位小数，数列是&lt;code>5 7 2 3 9 7 3 9 5 1 2 8 8 1&lt;/code>，牌型是&lt;code>123 123 55 789 789&lt;/code>&lt;/p>
&lt;p>&lt;code>九莲宝灯&lt;/code>在第 32452 位小数，数列是&lt;code>9 2 1 9 5 1 9 6 7 5 1 4 8 3&lt;/code>，牌型是&lt;code>111 234 55 678 999&lt;/code>，还是个最漂亮的九莲宝灯。&lt;/p>
&lt;p>&lt;code>四暗刻绿一色&lt;/code>在第 162552 位小数，数列是&lt;code>4 2 4 3 3 3 4 8 8 2 2 6 6 6&lt;/code>，牌型是&lt;code>222 333 444 666 88&lt;/code>，显然这还是个纯绿一色。&lt;/p>
&lt;p>最后回顾下一切的开端：&lt;/p>
&lt;p>&lt;img src="https://naizi.ch/pic/2021-03-17-mahjong-in-pai/screenshot.jpg"
loading="lazy"
alt="开端"
>&lt;/p></description></item><item><title>试做了一个明日方舟的小夜灯</title><link>https://naizi.ch/2021/01/12/%E8%AF%95%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F%E7%9A%84%E5%B0%8F%E5%A4%9C%E7%81%AF/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://naizi.ch/2021/01/12/%E8%AF%95%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F%E7%9A%84%E5%B0%8F%E5%A4%9C%E7%81%AF/</guid><description>&lt;p>之前也有在尝试用 3D 打印做奇怪的东西，建模一直在用的是 AutoDesk 家的线上工具&lt;a class="link" href="https://www.tinkercad.com/" target="_blank" rel="noopener"
>Tinkercad&lt;/a>，属于那种拖拖拽拽就能拼出差不多模型的工具，还挺好用。&lt;/p>
&lt;p>这次尝试做小夜灯，原本是打算做成游戏关卡结算时的三星标志，后来想了想，为了更显而易见的突出方舟元素，用了游戏里医疗干员的标志。主要因为医疗干员的标志几何对称性很好，估摸着可以偷懒。&lt;/p>
&lt;p>软件用了同事推荐的&lt;a class="link" href="https://www.openscad.org/" target="_blank" rel="noopener"
>OpenSCAD&lt;/a>，通过代码的方式来进行建模。我基本上是一边查文档一边写，很容易就上手找到需要的功能写出来了。&lt;/p>
&lt;p>除了没有代码自动格式化这一点略有不习惯，代码逻辑支持实体的交并补操作，渲染后可以意见导出 stl 格式文档进行后续打印工作，实在是方便的很。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>放两张成果图，使用的是创想三维的 Ender-3 打印机。冬天材料热涨冷缩比较严重结果留下了两道印子，有点可惜。&lt;/p>
&lt;p>电池盒是圣诞节的时候那种细绳装饰灯的电池，考虑到亮度和分散光源，接了一个 COB 灯板。&lt;/p>
&lt;p>&lt;img src="https://naizi.ch/pic/2021-01-12-arknight-lamp/battery.jpg"
loading="lazy"
alt="lamp"
>&lt;/p>
&lt;p>&lt;img src="https://naizi.ch/pic/2021-01-12-arknight-lamp/lamp.jpg"
loading="lazy"
alt="lamp"
>&lt;/p>
&lt;p>工程文件放在&lt;a class="link" href="https://github.com/Neutralization/Arknights-lamp" target="_blank" rel="noopener"
>github&lt;/a>上了。&lt;/p></description></item></channel></rss>